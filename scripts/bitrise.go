//go:build ignore

package main

import (
	"bytes"
	"flag"
	"io"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/coreos/go-semver/semver"
	"gopkg.in/yaml.v2"
)

func main() {
	out := flag.String("out", "lookup_gen.go", "output file")
	flag.Parse()

	// temporary directory to clone the index
	codedir, err := ioutil.TempDir("", "")
	defer os.RemoveAll(codedir)
	if err != nil {
		log.Fatalln(err)
	}

	// clone the index
	cmd := exec.Command("git", "clone", "--depth=1", "https://github.com/bitrise-io/bitrise-steplib.git", codedir)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		log.Fatalln(err)
	}

	// find all step yaml files
	pattern := filepath.Join(codedir, "steps", "*", "*", "step.yml")
	matches, _ := filepath.Glob(pattern)

	// collate plugin data
	plugins := map[string]*plugin{}
	for _, match := range matches {
		println(match)

		// read the file
		raw, err := ioutil.ReadFile(match)
		if err != nil {
			log.Fatal(err)
		}

		// parse the yaml
		step_ := new(step)
		if err := yaml.Unmarshal(raw, step_); err != nil {
			log.Fatal(err)
		}

		// trim the path prefix
		trimmed := strings.TrimPrefix(match, codedir)

		// extract the name and version from the path
		parts := strings.Split(trimmed, string(filepath.Separator))
		name := parts[2]
		version := parts[3]

		plugin_, ok := plugins[name]
		if !ok {
			plugin_ = new(plugin)
			plugin_.Name = name
			plugins[name] = plugin_
		}

		release_ := new(release)
		release_.Version = version
		release_.Commit = step_.Source.Commit
		release_.Repo = step_.Source.Git

		plugin_.Releases = append(plugin_.Releases, release_)
	}

	// determine the latest / default revision
	for _, plugin_ := range plugins {
		var versions semver.Versions
		for _, release_ := range plugin_.Releases {
			// parse the semver and append to the list
			version, err := semver.NewVersion(release_.Version)
			if err != nil {
				log.Fatal(err)
			}
			versions = append(versions, version)
		}
		// sort the semver
		semver.Sort(versions)
		// extract the latest version
		plugin_.Version = versions[len(versions)-1].String()
	}

	// generate the file from a template
	t, err := template.New("_").Parse(tmpl)
	if err != nil {
		log.Fatal(err)
	}

	buf := new(bytes.Buffer)
	if err := t.Execute(buf, plugins); err != nil {
		log.Fatal(err)
	}

	if *out == "-" {
		// write to stdout
		io.Copy(os.Stdout, buf)
	} else {
		// write to a file
		if err := ioutil.WriteFile(*out, buf.Bytes(), 0666); err != nil {
			log.Fatal(err)
		}
	}
}

type plugin struct {
	Name     string
	Version  string // latest version
	Releases []*release
}

type release struct {
	Version string
	Repo    string
	Commit  string
}

type step struct {
	Source struct {
		Git    string
		Commit string
	}
}

const tmpl = `// Code generated by scripts/bitrise.go; DO NOT EDIT.

package bitrise

var index = map[string]plugin{
	{{ range . }}
	"{{- .Name }}": {
		name:     "{{ .Name }}",
		version:  "{{ .Version }}",
		releases: map[string]release{
			{{- range .Releases }}
			"{{ .Version }}": {
				version: "{{ .Version }}",
				repo:    "{{ .Repo }}",
				commit:  "{{ .Commit }}",
			},
			{{- end }}
		},
	},
	{{- end }}
}
`
